// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trivia.proto

package trivia

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QuestionType_Difficulty int32

const (
	QuestionType_ANY    QuestionType_Difficulty = 0
	QuestionType_EASY   QuestionType_Difficulty = 1
	QuestionType_MEDIUM QuestionType_Difficulty = 2
	QuestionType_HARD   QuestionType_Difficulty = 3
)

var QuestionType_Difficulty_name = map[int32]string{
	0: "ANY",
	1: "EASY",
	2: "MEDIUM",
	3: "HARD",
}
var QuestionType_Difficulty_value = map[string]int32{
	"ANY":    0,
	"EASY":   1,
	"MEDIUM": 2,
	"HARD":   3,
}

func (x QuestionType_Difficulty) String() string {
	return proto.EnumName(QuestionType_Difficulty_name, int32(x))
}
func (QuestionType_Difficulty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_trivia_97764b122ed13b8a, []int{0, 0}
}

type QuestionType struct {
	Count                int32                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Difficulty           QuestionType_Difficulty `protobuf:"varint,2,opt,name=difficulty,proto3,enum=trivia.QuestionType_Difficulty" json:"difficulty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QuestionType) Reset()         { *m = QuestionType{} }
func (m *QuestionType) String() string { return proto.CompactTextString(m) }
func (*QuestionType) ProtoMessage()    {}
func (*QuestionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_trivia_97764b122ed13b8a, []int{0}
}
func (m *QuestionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuestionType.Unmarshal(m, b)
}
func (m *QuestionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuestionType.Marshal(b, m, deterministic)
}
func (dst *QuestionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionType.Merge(dst, src)
}
func (m *QuestionType) XXX_Size() int {
	return xxx_messageInfo_QuestionType.Size(m)
}
func (m *QuestionType) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionType.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionType proto.InternalMessageInfo

func (m *QuestionType) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QuestionType) GetDifficulty() QuestionType_Difficulty {
	if m != nil {
		return m.Difficulty
	}
	return QuestionType_ANY
}

type Question struct {
	Category             string   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Difficulty           string   `protobuf:"bytes,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Question             string   `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	CorrectAnswer        string   `protobuf:"bytes,5,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"`
	IncorrectAnswers     []string `protobuf:"bytes,6,rep,name=incorrect_answers,json=incorrectAnswers,proto3" json:"incorrect_answers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Question) Reset()         { *m = Question{} }
func (m *Question) String() string { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()    {}
func (*Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_trivia_97764b122ed13b8a, []int{1}
}
func (m *Question) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Question.Unmarshal(m, b)
}
func (m *Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Question.Marshal(b, m, deterministic)
}
func (dst *Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Question.Merge(dst, src)
}
func (m *Question) XXX_Size() int {
	return xxx_messageInfo_Question.Size(m)
}
func (m *Question) XXX_DiscardUnknown() {
	xxx_messageInfo_Question.DiscardUnknown(m)
}

var xxx_messageInfo_Question proto.InternalMessageInfo

func (m *Question) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Question) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Question) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *Question) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *Question) GetCorrectAnswer() string {
	if m != nil {
		return m.CorrectAnswer
	}
	return ""
}

func (m *Question) GetIncorrectAnswers() []string {
	if m != nil {
		return m.IncorrectAnswers
	}
	return nil
}

func init() {
	proto.RegisterType((*QuestionType)(nil), "trivia.QuestionType")
	proto.RegisterType((*Question)(nil), "trivia.Question")
	proto.RegisterEnum("trivia.QuestionType_Difficulty", QuestionType_Difficulty_name, QuestionType_Difficulty_value)
}

func init() { proto.RegisterFile("trivia.proto", fileDescriptor_trivia_97764b122ed13b8a) }

var fileDescriptor_trivia_97764b122ed13b8a = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xa6, 0x69, 0xf3, 0xa5, 0xd7, 0x5a, 0xc6, 0x4b, 0x17, 0xa1, 0x0b, 0x2d, 0x01, 0x21,
	0x20, 0x64, 0x51, 0xe9, 0xba, 0x44, 0x52, 0xd4, 0x45, 0x05, 0xc7, 0xba, 0xa8, 0x1b, 0x89, 0x71,
	0x2a, 0x03, 0x92, 0x89, 0x93, 0x89, 0x92, 0x77, 0xf1, 0x89, 0x7c, 0x2a, 0xe9, 0x24, 0x8d, 0xa9,
	0xb8, 0x9b, 0xf3, 0x73, 0x0f, 0x67, 0xee, 0x85, 0x81, 0x56, 0xe2, 0x5d, 0xc4, 0x41, 0xa6, 0xa4,
	0x96, 0x68, 0x57, 0xc8, 0xfb, 0x24, 0x30, 0xb8, 0x2d, 0x78, 0xae, 0x85, 0x4c, 0x57, 0x65, 0xc6,
	0x71, 0x04, 0xbd, 0x44, 0x16, 0xa9, 0x76, 0xc9, 0x84, 0xf8, 0x3d, 0x56, 0x01, 0x9c, 0x03, 0x3c,
	0x8b, 0xcd, 0x46, 0x24, 0xc5, 0xab, 0x2e, 0xdd, 0xce, 0x84, 0xf8, 0xc3, 0xe9, 0x49, 0x50, 0x27,
	0xb6, 0xe7, 0x83, 0xa8, 0xb1, 0xb1, 0xd6, 0x88, 0x37, 0x03, 0xf8, 0x51, 0xf0, 0x3f, 0x58, 0xe1,
	0xcd, 0x9a, 0xfe, 0x43, 0x07, 0xba, 0x8b, 0xf0, 0x6e, 0x4d, 0x09, 0x02, 0xd8, 0xcb, 0x45, 0x74,
	0x7d, 0xbf, 0xa4, 0x9d, 0x2d, 0x7b, 0x15, 0xb2, 0x88, 0x5a, 0xde, 0x17, 0x01, 0x67, 0x17, 0x8f,
	0x63, 0x70, 0x92, 0x58, 0xf3, 0x17, 0xa9, 0x4a, 0xd3, 0xae, 0xcf, 0x1a, 0x8c, 0x08, 0x5d, 0x5d,
	0x66, 0xdc, 0x54, 0xeb, 0x33, 0xf3, 0xc6, 0xe3, 0xbd, 0xd2, 0x96, 0x51, 0x5a, 0xcc, 0x36, 0xef,
	0xad, 0xce, 0x76, 0xbb, 0x55, 0xde, 0x0e, 0xe3, 0x29, 0x0c, 0x13, 0xa9, 0x14, 0x4f, 0xf4, 0x63,
	0x9c, 0xe6, 0x1f, 0x5c, 0xb9, 0x3d, 0xe3, 0x38, 0xac, 0xd9, 0xd0, 0x90, 0x78, 0x06, 0x47, 0x22,
	0xdd, 0x37, 0xe6, 0xae, 0x3d, 0xb1, 0xfc, 0x3e, 0xa3, 0x8d, 0x50, 0x79, 0xf3, 0xe9, 0x1c, 0xec,
	0x95, 0xd9, 0x18, 0xce, 0xe0, 0xe0, 0x92, 0xeb, 0xe6, 0x63, 0xa3, 0xbf, 0x36, 0x39, 0xa6, 0xbf,
	0xd9, 0x0b, 0xe7, 0xa1, 0x3e, 0xdb, 0x93, 0x6d, 0xae, 0x78, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0x55, 0x30, 0x0f, 0xd5, 0x01, 0x00, 0x00,
}
